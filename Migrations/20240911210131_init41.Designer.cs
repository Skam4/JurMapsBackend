// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JurMaps.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240911210131_init41")]
    partial class init41
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JurMaps.Model.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommentId1")
                        .HasColumnType("integer");

                    b.Property<bool>("CommentIsAnAnswer")
                        .HasColumnType("boolean");

                    b.Property<int>("CommentLikesCount")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentId1");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("JurMaps.Model.Map", b =>
                {
                    b.Property<int>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MapId"));

                    b.Property<int>("MapCreatorId")
                        .HasColumnType("integer");

                    b.Property<string>("MapDescription")
                        .HasColumnType("text");

                    b.Property<string>("MapName")
                        .HasColumnType("text");

                    b.Property<bool>("MapUploaded")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("MapId");

                    b.HasIndex("MapCreatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("JurMaps.Model.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhotoId"));

                    b.Property<int>("PhotoMapThumbnailMapId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PhotoWhenTaken")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PhotoId");

                    b.HasIndex("PhotoMapThumbnailMapId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("JurMaps.Model.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaceId"));

                    b.Property<Polygon>("Bounds")
                        .HasColumnType("geometry");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<string>("PlaceDescription")
                        .HasColumnType("text");

                    b.Property<string>("PlaceName")
                        .HasColumnType("text");

                    b.Property<string>("PlacePhoto1")
                        .HasColumnType("text");

                    b.Property<string>("PlacePhoto2")
                        .HasColumnType("text");

                    b.Property<string>("PlacePhoto3")
                        .HasColumnType("text");

                    b.Property<Point>("PlacePosition")
                        .HasColumnType("geometry");

                    b.Property<double?>("PlaceRadius")
                        .HasColumnType("double precision");

                    b.Property<string>("PlaceType")
                        .HasColumnType("text");

                    b.HasKey("PlaceId");

                    b.HasIndex("MapId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("JurMaps.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "user"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "admin"
                        });
                });

            modelBuilder.Entity("JurMaps.Model.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("JurMaps.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRoleRoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("UserRoleRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MapTag", b =>
                {
                    b.Property<int>("MapTagsTagId")
                        .HasColumnType("integer");

                    b.Property<int>("MapsWithThisTagMapId")
                        .HasColumnType("integer");

                    b.HasKey("MapTagsTagId", "MapsWithThisTagMapId");

                    b.HasIndex("MapsWithThisTagMapId");

                    b.ToTable("MapTag");
                });

            modelBuilder.Entity("JurMaps.Model.Comment", b =>
                {
                    b.HasOne("JurMaps.Model.Map", "CommentedMap")
                        .WithMany("MapComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JurMaps.Model.User", "CommentOwner")
                        .WithMany("UserComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JurMaps.Model.Comment", null)
                        .WithMany("CommentAnswers")
                        .HasForeignKey("CommentId1");

                    b.HasOne("JurMaps.Model.User", null)
                        .WithMany("UserLikedComments")
                        .HasForeignKey("UserId");

                    b.Navigation("CommentOwner");

                    b.Navigation("CommentedMap");
                });

            modelBuilder.Entity("JurMaps.Model.Map", b =>
                {
                    b.HasOne("JurMaps.Model.User", "MapCreator")
                        .WithMany("UserMaps")
                        .HasForeignKey("MapCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JurMaps.Model.User", null)
                        .WithMany("UserLikedMaps")
                        .HasForeignKey("UserId");

                    b.Navigation("MapCreator");
                });

            modelBuilder.Entity("JurMaps.Model.Photo", b =>
                {
                    b.HasOne("JurMaps.Model.Map", "PhotoMapThumbnail")
                        .WithMany()
                        .HasForeignKey("PhotoMapThumbnailMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhotoMapThumbnail");
                });

            modelBuilder.Entity("JurMaps.Model.Place", b =>
                {
                    b.HasOne("JurMaps.Model.Map", "PlaceMap")
                        .WithMany("MapPlaces")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceMap");
                });

            modelBuilder.Entity("JurMaps.Model.User", b =>
                {
                    b.HasOne("JurMaps.Model.Role", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("MapTag", b =>
                {
                    b.HasOne("JurMaps.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("MapTagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JurMaps.Model.Map", null)
                        .WithMany()
                        .HasForeignKey("MapsWithThisTagMapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JurMaps.Model.Comment", b =>
                {
                    b.Navigation("CommentAnswers");
                });

            modelBuilder.Entity("JurMaps.Model.Map", b =>
                {
                    b.Navigation("MapComments");

                    b.Navigation("MapPlaces");
                });

            modelBuilder.Entity("JurMaps.Model.User", b =>
                {
                    b.Navigation("UserComments");

                    b.Navigation("UserLikedComments");

                    b.Navigation("UserLikedMaps");

                    b.Navigation("UserMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
